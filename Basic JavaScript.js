// Однорядковий коментар
/* Багатостроковий 
		коментар */
		
// В JavaScript є сім різних типів даних, а саме: undefined , null , boolean , string , symbol , number и object

// Оголошення змінної
var myName = 0;

//Оператор привласнення
var a = 7;
var b = a;
var c = "I am a";
/* Коли оголошено змінні JavaScript, вони мають початкове значення undefined. Якщо виконувати математичну операцію з undefined змінною, результат буде NaN, що означає «Not a Number» */

//У JavaScript всі змінні та імена функцій чутливі до регістру
/* Краща практика використовувати camelCase. У camelCase імена змінних з кількома словами мають перше слово в нижньому регістрі, а перша літера кожного наступного слова велика */
var someVariable;
var anotherVariableName;
var thisVariableNameIsSoLong;

//JavaScript використовує символ + як операцію додавання при розміщенні між двома числами
var sum = 10 + 10;

//JavaScript використовує символ - як операцію віднімання при розміщенні між двома числами
var difference = 45 - 33;

//JavaScript використовує символ * як операцію множення при розміщенні між двома числами
var product = 8 * 10;

//JavaScript використовує символ / як операцію ділення при розміщенні між двома числами
var quotient = 66 / 33;

//Збільшення числа
// i++ - еквівалентно виразу i = i + 1
/* Два знаки можна ставити не тільки після змінної, але і перед змінною. Різниця у цьому, що у першому випадку змінна змінюється, але повертається її старе значення, тоді як у другому випадку повертається відразу нове значення. Нижче приклад: */
	// Створюємо змінну зі значенням 1
   var d = 1;
   d++; // Значення 1
   d === 2; // true Тут уже значення 2, тому що це вже наступна операція
    // Створюємо змінну зі значенням 1
   var f = 1;
   ++f; // Значення 2
   f === 2; // Тут у будь-якому разі вже змінена змінна
// Це матиме значення у момент порівняння. Приклад:
     // Створюємо змінну зі значенням 1
   var e = 1;
   e++ === 2; // false, оскільки хоч значення змінної і змінилося, ми отримали її старе значення
     // Створюємо змінну зі значенням 1
   var r = 1;
   ++r === 2; // true, тому що тут ми одразу набули нового значення.

// Ідентично збільшенню числа працює зменшення числа 
var myVar = 11;
myVar--;

//Створення десяткових чисел
var myDecimal = 5.7;

//Множення дробових чисел
var product = 2.0 * 2.5;

//Ділення десяткових чисел
var quotient = 4.4 / 2.0;

//Пошук залишку
//Оператор залишку % дає залишок від поділу двох чисел
var remainder= 11%3;

//Існують оператори, які виконують як математичну операцію, так і призначення за один крок. Одним із таких операторів є оператор +=, -=, *=, /=
//Присвоєння з розширеним додаванням +=
var k = 3;
var p = 17;
var m = 12;
k+=12;
p+=9;
m+=7;

//Присвоєння з розширеним відніманням -=
var z = 11;
var w = 9;
var v = 3;
z-=6;
w-=15;
v-=1;

//Присвоєння з розширеним множенням *=
var aa = 5;
var bb = 12;
var cc = 4.6;
aa*=5;
bb*=3;
cc*=10;

//Присвоєння з розширеним діленням /=
var ff = 48;
var kk = 108;
var rr = 33;
ff/=12;
kk/=4;
rr/=11;

//Оголошення строкових змінних
var firstName = "Alan";
var lastName = "Turing";

//Екранування лапок у рядках
/*
Коли визначається строка, оголошення повинне починатися та закінчуватися одинарною або подвійною лапками. Для того, щоб використотувати лапку в середині строки потрібно екранувати лапку, поміщаючи зворотну косу межу (\) перед нею. Це сигналізує JavaScript, що наступна лапка не є кінцем рядка, а просто частина рядка
*/
var myStr = "I am a \"double quoted\" string inside \"double quotes\".";

//Значення рядків у JavaScript можуть бути записані з одинарними або подвійними лапками, якщо починаєти і закінчувати одним і тим же типом лапок
const doubleQuoteStr = "Это строка";
const singleQuoteStr = 'Это также строка';
//В строці можна використовувати різні типи кавичок. Приклад:
 const conversation = 'Finn exclaims to Jake, "Algebraic!"';
 var myStr = '<a href="http://www.example.com" target="_blank">Link</a>';

/* Спецсимволи, що екрануються в рядках:
	\'  одиночна цитата
	\"  подвійна цитата
	\\  зворотний слеш
	\n  нова лінія
	\r  повернення каретки
	\t  табуляція
	\b  повернення на одну позицію (backspace)
	\f  форма
*/
var myStr ="FirstLine\n\t\\SecondLine\nThirdLine";

//У JavaScript, коли оператор + використовується з рядком, він називається оператором конкатенації та виконує функцію об'єднання строк
var myStr = "This is the start. " + "This is the end.";

//Також можна використовувати оператор += для конкатенації строки в кінець існуючої строкової змінної. Це може бути дуже корисно для розбиття довгої строки на кілька строк
var myStr = "This is the first sentence. ";
myStr += "This is the second sentence.";

// Створення строк зі змінними
var ourName = "Architect";
var ourStr = "Hello, our name is " + ourName + ", you in the Matrix?";

//Додавання значень змінних до строк
var someAdjective = "fun";
var myStr = "Learning to code is ";
myStr += someAdjective;

